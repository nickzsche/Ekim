"use client";

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { Product, Quote, QuoteItem, Customer } from '@/lib/database';
import { generateQuotePDF, QuotePDFData } from '@/lib/pdfGenerator';

// Types and Interfaces
interface CartItem {
  product: Product;
  quantity: number;
  unitPrice: number;
  discount?: number;
  margin?: number;
  customName?: string;
  salesPrice?: number;
  manualSalesPrice?: boolean;
  isGrouped?: boolean;
  groupName?: string;
  groupItems?: CartItem[];
}

export default function Home() {
  // States
  const [products, setProducts] = useState<Product[]>([]);
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [cart, setCart] = useState<CartItem[]>([]);
  const [selectedProducts, setSelectedProducts] = useState<number[]>([]);
  const [isGrouping, setIsGrouping] = useState(false);
  const [groupName, setGroupName] = useState('');
  const [customerInfo, setCustomerInfo] = useState({
    name: '',
    email: '',
    phone: '',
    company: '',
    address: ''
  });
  const [projectDetails, setProjectDetails] = useState({
    projectDesign: '',
    projectDescription: ''
  });
  const [schedule, setSchedule] = useState({
    startDate: '',
    endDate: ''
  });
  const [conditions, setConditions] = useState({
    validityPeriod: '30',
    deliveryTime: ''
  });
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedCustomer, setSelectedCustomer] = useState('');
  const [activeStep, setActiveStep] = useState(1);
  const [editingQuoteId, setEditingQuoteId] = useState<number | null>(null);
  const [width, setWidth] = useState<number>(0);
  const [height, setHeight] = useState<number>(0);
  const [count, setCount] = useState<number>(1);
  const [squareMeters, setSquareMeters] = useState<number>(0);

  // Effects
  useEffect(() => {
    setSquareMeters(width * height * count);
  }, [width, height, count]);

  useEffect(() => {
    fetchProducts();
    fetchCustomers();
  }, []);

  // Data fetching functions
  const fetchProducts = async () => {
    try {
      const response = await fetch('/api/products');
      const data = await response.json();
      setProducts(data);
    } catch (error) {
      console.error('Ürünler yüklenirken hata:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchCustomers = async () => {
    try {
      const response = await fetch('/api/customers');
      const data = await response.json();
      setCustomers(data);
    } catch (error) {
      console.error('Müşteriler yüklenirken hata:', error);
    }
  };

  // Group functions
  const handleGroupProducts = () => {
    if (selectedProducts.length < 2) {
      alert('En az 2 ürün seçmelisiniz');
      return;
    }
    setIsGrouping(true);
  };

  const createGroup = () => {
    if (!groupName) {
      alert('Grup adı giriniz');
      return;
    }

    const selectedItems = cart.filter(item => selectedProducts.includes(item.product.id));
    
    const groupHeader: CartItem = {
      product: {
        id: Date.now(),
        name: groupName,
        price: selectedItems.reduce((sum, item) => sum + (item.unitPrice * item.quantity), 0),
        category: 'Grup',
        stock_quantity: 1
      },
      quantity: 1,
      unitPrice: selectedItems.reduce((sum, item) => sum + (item.unitPrice * item.quantity), 0),
      isGrouped: true,
      groupItems: selectedItems
    };

    setCart(prev => [
      ...prev.filter(item => !selectedProducts.includes(item.product.id)),
      groupHeader
    ]);

    setSelectedProducts([]);
    setIsGrouping(false);
    setGroupName('');
  };

  // Cart management functions
  const addToCart = (product: Product) => {
    const existingItem = cart.find(item => item.product.id === product.id);
    if (existingItem) {
      setCart(cart.map(item => 
        item.product.id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setCart([
        ...cart,
        {
          product,
          quantity: 1,
          unitPrice: product.price || 0,
          discount: 0,
          margin: 0,
          salesPrice: product.price || 0,
          manualSalesPrice: false
        }
      ]);
    }
  };

  // Cart item update functions
  const updateProductName = (productId: number, customName: string) => {
    setCart(cart.map(item =>
      item.product.id === productId
        ? { ...item, customName }
        : item
    ));
  };

  const removeFromCart = (productId: number) => {
    setCart(cart.filter(item => item.product.id !== productId));
  };

  const updateQuantity = (productId: number, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    setCart(cart.map(item => 
      item.product.id === productId 
        ? { ...item, quantity }
        : item
    ));
  };

  const updateUnitPrice = (productId: number, unitPrice: number) => {
    setCart(cart.map(item => {
      if (item.product.id === productId) {
        let newSalesPrice = item.manualSalesPrice
          ? item.salesPrice
          : calculateSalesPrice(unitPrice, item.discount || 0, item.margin || 0);
        return { ...item, unitPrice, salesPrice: newSalesPrice };
      }
      return item;
    }));
  };

  const updateDiscount = (productId: number, discount: number) => {
    setCart(cart.map(item => {
      if (item.product.id === productId) {
        let newSalesPrice = item.manualSalesPrice
          ? item.salesPrice
          : calculateSalesPrice(item.unitPrice, discount, item.margin || 0);
        return { ...item, discount, salesPrice: newSalesPrice };
      }
      return item;
    }));
  };

  const updateMargin = (productId: number, margin: number) => {
    setCart(cart.map(item => {
      if (item.product.id === productId) {
        let newSalesPrice = item.manualSalesPrice
          ? item.salesPrice
          : calculateSalesPrice(item.unitPrice, item.discount || 0, margin);
        return { ...item, margin, salesPrice: newSalesPrice };
      }
      return item;
    }));
  };

  const updateSalesPrice = (productId: number, salesPrice: number) => {
    setCart(cart.map(item => {
      if (item.product.id === productId) {
        return { ...item, salesPrice, manualSalesPrice: true };
      }
      return item;
    }));
  };

  // Helper functions
  const calculateSalesPrice = (unitPrice: number, discount: number, margin: number) => {
    const discounted = unitPrice * (1 - (discount || 0) / 100);
    const withMargin = discounted * (1 + (margin || 0) / 100);
    return parseFloat(withMargin.toFixed(2));
  };

  // Quote management functions
  const handleCustomerSelect = (customerId: string) => {
    setSelectedCustomer(customerId);
    if (customerId) {
      const customer = customers.find(c => c.id?.toString() === customerId);
      if (customer) {
        setCustomerInfo({
          name: customer.name,
          email: customer.email || '',
          phone: customer.phone || '',
          company: customer.company || '',
          address: customer.address || ''
        });
      }
    } else {
      setCustomerInfo({
        name: '',
        email: '',
        phone: '',
        company: '',
        address: ''
      });
    }
  };

  const loadQuoteForEditing = async (quoteData: any) => {
    try {
      setEditingQuoteId(quoteData.id);
      
      setCustomerInfo({
        name: quoteData.customer_name || '',
        email: quoteData.customer_email || '',
        phone: quoteData.customer_phone || '',
        company: quoteData.company || '',
        address: ''
      });
      
      const notes = quoteData.notes || '';
      const projectDesign = notes.match(/Proje Tasarım: ([^\n]*)/)?.[1] || '';
      const projectDescription = notes.match(/Proje Açıklama: ([^\n]*)/)?.[1] || '';
      const startDate = notes.match(/Başlangıç: ([^\n]*)/)?.[1] || '';
      const endDate = notes.match(/Bitiş: ([^\n]*)/)?.[1] || '';
      const validityPeriod = notes.match(/Geçerlilik: ([^\n]*)/)?.[1] || '30';
      const deliveryTime = notes.match(/Teslim: ([^\n]*)/)?.[1] || '';
      
      setProjectDetails({
        projectDesign,
        projectDescription
      });
      
      setSchedule({
        startDate,
        endDate
      });
      
      setConditions({
        validityPeriod: validityPeriod.replace(' gün', ''),
        deliveryTime
      });
      
      const response = await fetch(`/api/quotes/${quoteData.id}`);
      if (response.ok) {
        const details = await response.json();
        const cartItems: CartItem[] = details.items?.map((item: any) => ({
          product: {
            id: item.product_id,
            name: item.product_name || 'Unknown Product',
            brand: item.brand || '',
            model: item.model || '',
            code: item.code || '',
            category: '',
            price: item.unit_price,
            description: '',
            specifications: '',
            stock_quantity: 0,
            unit: 'adet'
          },
          quantity: item.quantity,
          unitPrice: item.unit_price
        })) || [];
        
        setCart(cartItems);
      }
      
      setActiveStep(1);
    } catch (error) {
      console.error('Quote loading error:', error);
      alert('Teklif yüklenirken hata oluştu!');
    }
  };

  const createQuote = async () => {
    if (!customerInfo.name.trim()) {
      alert('Müşteri adı zorunludur!');
      return;
    }

    if (cart.length === 0) {
      alert('Sepette ürün bulunmuyor!');
      return;
    }

    try {
      const totalAmount = cart.reduce((sum, item) => 
        sum + item.unitPrice * item.quantity, 0
      );

      const quote: Quote = {
        customer_name: customerInfo.name,
        customer_email: customerInfo.email || undefined,
        customer_phone: customerInfo.phone || undefined,
        company: customerInfo.company || undefined,
        total_amount: totalAmount,
        status: 'draft',
        notes: `Proje Tasarım: ${projectDetails.projectDesign}\nProje Açıklama: ${projectDetails.projectDescription}\nBaşlangıç: ${schedule.startDate}\nBitiş: ${schedule.endDate}\nGeçerlilik: ${conditions.validityPeriod} gün\nTeslim: ${conditions.deliveryTime}`
      };

      const items: QuoteItem[] = cart.map(item => ({
        product_id: item.product.id!,
        quantity: item.quantity,
        unit_price: item.unitPrice,
        total_price: item.unitPrice * item.quantity,
        quote_id: 0
      }));

      const response = await fetch('/api/quotes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ quote, items }),
      });

      if (response.ok) {
        const result = await response.json();
        const quoteId = result.quoteId;

        const pdfData: QuotePDFData = {
          quoteId: quoteId,
          customerInfo: {
            name: customerInfo.name,
            company: customerInfo.company,
            email: customerInfo.email,
            phone: customerInfo.phone,
            address: customerInfo.address
          },
          projectDetails: {
            projectDesign: projectDetails.projectDesign,
            projectDescription: projectDetails.projectDescription
          },
          schedule: {
            startDate: schedule.startDate,
            endDate: schedule.endDate
          },
          conditions: {
            validityPeriod: conditions.validityPeriod,
            deliveryTime: conditions.deliveryTime
          },
          items: cart.map(item => ({
            product: {
              name: item.customName || item.product.name,
              brand: item.product.brand,
              model: item.product.model,
              code: item.product.code,
            },
            quantity: item.quantity,
            unitPrice: item.salesPrice ?? item.unitPrice,
            total: (item.salesPrice ?? item.unitPrice) * item.quantity,
          })),
          subtotal: cart.reduce((sum, item) => sum + (item.salesPrice ?? item.unitPrice) * item.quantity, 0),
          kdv: cart.reduce((sum, item) => sum + (item.salesPrice ?? item.unitPrice) * item.quantity, 0) * 0.20,
          total: cart.reduce((sum, item) => sum + (item.salesPrice ?? item.unitPrice) * item.quantity, 0) * 1.20,
          createdAt: new Date().toISOString()
        };

        await generateQuotePDF(pdfData);

        alert('Teklif başarıyla oluşturuldu ve PDF indirildi!');

        setCart([]);
        setCustomerInfo({
          name: '',
          email: '',
          phone: '',
          company: '',
          address: ''
        });
        setProjectDetails({
          projectDesign: '',
          projectDescription: ''
        });
        setSchedule({
          startDate: '',
          endDate: ''
        });
        setConditions({
          validityPeriod: '30',
          deliveryTime: ''
        });
        setSelectedCustomer('');
        setActiveStep(1);
      } else {
        alert('Teklif oluşturulurken hata oluştu!');
      }
    } catch (error) {
      console.error('Teklif oluşturma hatası:', error);
      alert('Teklif oluşturulurken hata oluştu!');
    }
  };

  // Computed values
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (product.brand && product.brand.toLowerCase().includes(searchTerm.toLowerCase())) ||
                         (product.model && product.model.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = !selectedCategory || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const categories = [...new Set(products.map(p => p.category).filter(Boolean))];
  const subtotal = cart.reduce((sum, item) => sum + (item.salesPrice ?? item.unitPrice) * item.quantity, 0);
  const kdv = subtotal * 0.20;
  const total = subtotal + kdv;

  const totalCost = cart.reduce((sum, item) => {
    const discount = item.discount ?? 0;
    const discountedUnit = item.unitPrice * (1 - discount / 100);
    return sum + discountedUnit * item.quantity;
  }, 0);

  const totalProfit = cart.reduce((sum, item) => {
    const discount = item.discount ?? 0;
    const margin = item.margin ?? 0;
    const discountedUnit = item.unitPrice * (1 - discount / 100);
    const profitPerUnit = discountedUnit * (margin / 100);
    return sum + profitPerUnit * item.quantity;
  }, 0);

  const steps = [
    { id: 1, title: 'Müşteri Bilgileri', icon: '👤' },
    { id: 2, title: 'Proje Detayları', icon: '📋' },
    { id: 3, title: 'Ürün Seçimi', icon: '🛍️' },
    { id: 4, title: 'Özet & Onay', icon: '✅' }
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl">Yükleniyor...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 relative overflow-hidden">
      <Header />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10">
        {/* Your existing JSX */}
      </main>
      <Footer />
    </div>
  );
}