{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/AOM/Desktop/Baran%20Proje/EkimSogutma/teklif-formu/src/lib/database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\r\nimport path from 'path';\r\n\r\n// Veritabanı dosyasının yolu\r\nconst dbPath = path.join(process.cwd(), 'data', 'products.db');\r\n\r\n// Veritabanı bağlantısı\r\nlet db: Database.Database;\r\n\r\nexport function getDatabase() {\r\n  if (!db) {\r\n    // Data klasörü yoksa oluştur\r\n    const fs = require('fs');\r\n    const dataDir = path.dirname(dbPath);\r\n    if (!fs.existsSync(dataDir)) {\r\n      fs.mkdirSync(dataDir, { recursive: true });\r\n    }\r\n\r\n    db = new Database(dbPath);\r\n    \r\n    // Ürünler tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS products (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        name TEXT NOT NULL,\r\n        code TEXT UNIQUE,\r\n        brand TEXT,\r\n        model TEXT,\r\n        category TEXT,\r\n        price REAL,\r\n        description TEXT,\r\n        specifications TEXT,\r\n        stock_quantity INTEGER DEFAULT 0,\r\n        unit TEXT DEFAULT 'adet',\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n\r\n    // Müşteriler tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS customers (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        name TEXT NOT NULL,\r\n        email TEXT,\r\n        phone TEXT,\r\n        company TEXT,\r\n        address TEXT,\r\n        tax_number TEXT,\r\n        tax_office TEXT,\r\n        balance REAL DEFAULT 0,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n\r\n    // Teklifler tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS quotes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        customer_name TEXT NOT NULL,\r\n        customer_email TEXT,\r\n        customer_phone TEXT,\r\n        company TEXT,\r\n        total_amount REAL DEFAULT 0,\r\n        status TEXT DEFAULT 'draft',\r\n        notes TEXT,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n\r\n    // Teklif kalemleri tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS quote_items (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        quote_id INTEGER NOT NULL,\r\n        product_id INTEGER NOT NULL,\r\n        quantity INTEGER NOT NULL,\r\n        unit_price REAL NOT NULL,\r\n        total_price REAL NOT NULL,\r\n        FOREIGN KEY (quote_id) REFERENCES quotes (id) ON DELETE CASCADE,\r\n        FOREIGN KEY (product_id) REFERENCES products (id)\r\n      )\r\n    `);\r\n\r\n    // Cari hareketler tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS transactions (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        customer_id INTEGER NOT NULL,\r\n        date TEXT NOT NULL,\r\n        type TEXT NOT NULL CHECK(type IN ('tahsilat', 'ödeme', 'çek', 'borç')),\r\n        method TEXT NOT NULL CHECK(method IN ('nakit', 'kredi', 'çek', 'manuel')),\r\n        amount REAL NOT NULL,\r\n        description TEXT,\r\n        verilis_tarihi TEXT,\r\n        vade_tarihi TEXT,\r\n        bank TEXT,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE CASCADE\r\n      )\r\n    `);\r\n\r\n    // Eğer customers tablosunda balance kolonu yoksa ekle\r\n    const tableInfo = db.prepare(\"PRAGMA table_info(customers)\").all();\r\n    const hasBalance = (tableInfo as any[]).some((col: any) => col.name === 'balance');\r\n    if (!hasBalance) {\r\n      db.exec(`ALTER TABLE customers ADD COLUMN balance REAL DEFAULT 0`);\r\n    }\r\n\r\n    // Tanımlı projeler tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS projects (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        name TEXT NOT NULL,\r\n        description TEXT,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n\r\n    // Tedarikçiler tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS suppliers (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        name TEXT NOT NULL,\r\n        description TEXT,\r\n        contact_name TEXT,\r\n        email TEXT,\r\n        phone TEXT,\r\n        address TEXT,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n\r\n    // Products tablosuna supplier_id kolonu ekle (yoksa)\r\n    const productsTableInfo = db.prepare(\"PRAGMA table_info(products)\").all();\r\n    const hasSupplierId = (productsTableInfo as any[]).some((col: any) => col.name === 'supplier_id');\r\n    if (!hasSupplierId) {\r\n      db.exec(`ALTER TABLE products ADD COLUMN supplier_id INTEGER REFERENCES suppliers(id)`);\r\n    }\r\n\r\n    // Proje grupları tablosunu oluştur (kategoriler)\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS project_groups (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        project_id INTEGER NOT NULL,\r\n        name TEXT NOT NULL,\r\n        sort_order INTEGER DEFAULT 0,\r\n        FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE\r\n      )\r\n    `);\r\n\r\n    // Proje ürünleri tablosunu oluştur\r\n    db.exec(`\r\n      CREATE TABLE IF NOT EXISTS project_items (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        project_id INTEGER NOT NULL,\r\n        group_id INTEGER,\r\n        product_id INTEGER NOT NULL,\r\n        product_name TEXT NOT NULL,\r\n        quantity INTEGER DEFAULT 1,\r\n        unit_price REAL DEFAULT 0,\r\n        discount REAL DEFAULT 0,\r\n        margin REAL DEFAULT 0,\r\n        sales_price REAL DEFAULT 0,\r\n        square_meters REAL DEFAULT 0,\r\n        sort_order INTEGER DEFAULT 0,\r\n        FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE,\r\n        FOREIGN KEY (group_id) REFERENCES project_groups (id) ON DELETE SET NULL,\r\n        FOREIGN KEY (product_id) REFERENCES products (id)\r\n      )\r\n    `);\r\n  }\r\n  \r\n  return db;\r\n}\r\n\r\n// Ürün tipi\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  code?: string;\r\n  brand?: string;\r\n  model?: string;\r\n  category?: string;\r\n  price?: number;\r\n  description?: string;\r\n  specifications?: string;\r\n  stock_quantity?: number;\r\n  unit?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// Müşteri tipi\r\nexport interface Customer {\r\n  id?: number;\r\n  name: string;\r\n  email?: string;\r\n  phone?: string;\r\n  company?: string;\r\n  address?: string;\r\n  tax_number?: string;\r\n  tax_office?: string;\r\n  balance?: number;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// Cari hareket tipi\r\nexport interface Transaction {\r\n  id?: number;\r\n  customer_id: number;\r\n  date: string;\r\n  type: 'tahsilat' | 'ödeme' | 'çek' | 'borç';\r\n  method: 'nakit' | 'kredi' | 'çek' | 'manuel';\r\n  amount: number;\r\n  description?: string;\r\n  verilis_tarihi?: string;\r\n  vade_tarihi?: string;\r\n  bank?: string;\r\n  created_at?: string;\r\n}\r\n\r\n// Teklif tipi\r\nexport interface Quote {\r\n  id?: number;\r\n  customer_name: string;\r\n  customer_email?: string;\r\n  customer_phone?: string;\r\n  company?: string;\r\n  total_amount?: number;\r\n  status?: string;\r\n  notes?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// Teklif kalemi tipi\r\nexport interface QuoteItem {\r\n  id?: number;\r\n  quote_id: number;\r\n  product_id: number;\r\n  quantity: number;\r\n  unit_price: number;\r\n  total_price: number;\r\n}\r\n\r\n// Tanımlı proje tipi\r\nexport interface Project {\r\n  id?: number;\r\n  name: string;\r\n  description?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// Proje grubu tipi\r\nexport interface ProjectGroup {\r\n  id?: number;\r\n  project_id: number;\r\n  name: string;\r\n  sort_order?: number;\r\n}\r\n\r\n// Proje ürün tipi\r\nexport interface ProjectItem {\r\n  id?: number;\r\n  project_id: number;\r\n  group_id?: number;\r\n  product_id: number;\r\n  product_name: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  discount: number;\r\n  margin: number;\r\n  sales_price: number;\r\n  square_meters: number;\r\n  sort_order?: number;\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,6BAA6B;AAC7B,MAAM,SAAS,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAEhD,wBAAwB;AACxB,IAAI;AAEG,SAAS;IACd,IAAI,CAAC,IAAI;QACP,6BAA6B;QAC7B,MAAM;QACN,MAAM,UAAU,4GAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,GAAG,UAAU,CAAC,UAAU;YAC3B,GAAG,SAAS,CAAC,SAAS;gBAAE,WAAW;YAAK;QAC1C;QAEA,KAAK,IAAI,sIAAQ,CAAC;QAElB,4BAA4B;QAC5B,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;IAgBT,CAAC;QAED,+BAA+B;QAC/B,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;IAcT,CAAC;QAED,8BAA8B;QAC9B,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;IAaT,CAAC;QAED,qCAAqC;QACrC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;IAWT,CAAC;QAED,oCAAoC;QACpC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;IAeT,CAAC;QAED,sDAAsD;QACtD,MAAM,YAAY,GAAG,OAAO,CAAC,gCAAgC,GAAG;QAChE,MAAM,aAAa,AAAC,UAAoB,IAAI,CAAC,CAAC,MAAa,IAAI,IAAI,KAAK;QACxE,IAAI,CAAC,YAAY;YACf,GAAG,IAAI,CAAC,CAAC,uDAAuD,CAAC;QACnE;QAEA,qCAAqC;QACrC,GAAG,IAAI,CAAC,CAAC;;;;;;;;IAQT,CAAC;QAED,iCAAiC;QACjC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;IAYT,CAAC;QAED,qDAAqD;QACrD,MAAM,oBAAoB,GAAG,OAAO,CAAC,+BAA+B,GAAG;QACvE,MAAM,gBAAgB,AAAC,kBAA4B,IAAI,CAAC,CAAC,MAAa,IAAI,IAAI,KAAK;QACnF,IAAI,CAAC,eAAe;YAClB,GAAG,IAAI,CAAC,CAAC,4EAA4E,CAAC;QACxF;QAEA,iDAAiD;QACjD,GAAG,IAAI,CAAC,CAAC;;;;;;;;IAQT,CAAC;QAED,mCAAmC;QACnC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;IAkBT,CAAC;IACH;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/AOM/Desktop/Baran%20Proje/EkimSogutma/teklif-formu/src/app/api/customers/%5Bid%5D/transactions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getDatabase } from '@/lib/database';\r\n\r\n// Müşterinin tüm cari hareketlerini getir\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    const { id } = await params;\r\n    const customerId = parseInt(id);\r\n\r\n    if (isNaN(customerId)) {\r\n      return NextResponse.json({ error: 'Invalid customer ID' }, { status: 400 });\r\n    }\r\n\r\n    const db = getDatabase();\r\n    \r\n    const transactions = db.prepare(`\r\n      SELECT * FROM transactions \r\n      WHERE customer_id = ? \r\n      ORDER BY date DESC, created_at DESC\r\n    `).all(customerId);\r\n\r\n    return NextResponse.json(transactions);\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching transactions:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Yeni cari hareket ekle\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    const { id } = await params;\r\n    const customerId = parseInt(id);\r\n\r\n    if (isNaN(customerId)) {\r\n      return NextResponse.json({ error: 'Invalid customer ID' }, { status: 400 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { date, type, method, amount, description, verilis_tarihi, vade_tarihi, bank } = body;\r\n\r\n    if (!date || !type || !method || !amount) {\r\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\r\n    }\r\n\r\n    const db = getDatabase();\r\n    \r\n    // Check if customer exists\r\n    const customer = db.prepare('SELECT id FROM customers WHERE id = ?').get(customerId);\r\n    if (!customer) {\r\n      return NextResponse.json({ error: 'Customer not found' }, { status: 404 });\r\n    }\r\n\r\n    // Insert transaction\r\n    const result = db.prepare(`\r\n      INSERT INTO transactions (customer_id, date, type, method, amount, description, verilis_tarihi, vade_tarihi, bank)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).run(customerId, date, type, method, amount, description || null, verilis_tarihi || null, vade_tarihi || null, bank || null);\r\n\r\n    // Update customer balance\r\n    // tahsilat ve çek: artı, ödeme ve borç: eksi\r\n    const balanceChange = (type === 'tahsilat' || type === 'çek') ? amount : -amount;\r\n    db.prepare(`\r\n      UPDATE customers \r\n      SET balance = balance + ?, updated_at = datetime('now')\r\n      WHERE id = ?\r\n    `).run(balanceChange, customerId);\r\n\r\n    // Get updated customer balance\r\n    const updatedCustomer = db.prepare('SELECT balance FROM customers WHERE id = ?').get(customerId);\r\n\r\n    return NextResponse.json({\r\n      message: 'Cari hareket başarıyla eklendi',\r\n      transaction: {\r\n        id: result.lastInsertRowid,\r\n        customer_id: customerId,\r\n        date,\r\n        type,\r\n        method,\r\n        amount,\r\n        description,\r\n        verilis_tarihi,\r\n        vade_tarihi,\r\n        bank\r\n      },\r\n      balance: (updatedCustomer as any).balance\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error adding transaction:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,aAAa,SAAS;QAE5B,IAAI,MAAM,aAAa;YACrB,OAAO,mKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,KAAK,IAAA,0JAAW;QAEtB,MAAM,eAAe,GAAG,OAAO,CAAC,CAAC;;;;IAIjC,CAAC,EAAE,GAAG,CAAC;QAEP,OAAO,mKAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,mKAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,KACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,aAAa,SAAS;QAE5B,IAAI,MAAM,aAAa;YACrB,OAAO,mKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG;QAEvF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ;YACxC,OAAO,mKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,KAAK,IAAA,0JAAW;QAEtB,2BAA2B;QAC3B,MAAM,WAAW,GAAG,OAAO,CAAC,yCAAyC,GAAG,CAAC;QACzE,IAAI,CAAC,UAAU;YACb,OAAO,mKAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,qBAAqB;QACrB,MAAM,SAAS,GAAG,OAAO,CAAC,CAAC;;;IAG3B,CAAC,EAAE,GAAG,CAAC,YAAY,MAAM,MAAM,QAAQ,QAAQ,eAAe,MAAM,kBAAkB,MAAM,eAAe,MAAM,QAAQ;QAEzH,0BAA0B;QAC1B,6CAA6C;QAC7C,MAAM,gBAAgB,AAAC,SAAS,cAAc,SAAS,QAAS,SAAS,CAAC;QAC1E,GAAG,OAAO,CAAC,CAAC;;;;IAIZ,CAAC,EAAE,GAAG,CAAC,eAAe;QAEtB,+BAA+B;QAC/B,MAAM,kBAAkB,GAAG,OAAO,CAAC,8CAA8C,GAAG,CAAC;QAErF,OAAO,mKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,aAAa;gBACX,IAAI,OAAO,eAAe;gBAC1B,aAAa;gBACb;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;YACA,SAAS,AAAC,gBAAwB,OAAO;QAC3C;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,mKAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}